@page "/Manudacturers"
@inject IManufacturerRepository repository
@using ManufacturerApp.Pages.Manufacturers

@inject IJSRuntime JS

<h3>Manudacturer List</h3>

<p>고객사 리스트를 출력 합니다.</p>


@if (manufacturers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Manufacturer Code</th>
                <th>Comment</th>
                <th>Edit</th>
                <th>Delete</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var manufacturer in manufacturers)
            {
            <tr>
                <td>@manufacturer.Id</td>
                <td>@manufacturer.Name</td>
                <td>@manufacturer.ManufacturerCode</td>
                <td>@manufacturer.Comment</td>
                <td>
                    <input type="button" value="Edit" class="btn btn-primary" 
                           data-toggle="modal" data-target="#manufacturerEditorDialog"  
                           @onclick="(()=> EditBy(manufacturer))"
                           />
                </td>
                <td>
                    <input type="button" value="Delete" class="btn btn-danger" 
                           @onclick="(()=> DeleteBy(manufacturer))"
                           data-toggle="modal" data-target="#manufacturerDeleteDialog"/>
                    
                </td>
            </tr>
            }
        </tbody>
    </table>
}
<div>
    <input type="button" value="등록" 
           data-toggle="modal" data-target="#manufacturerEditorDialog" 
           class="btn btn-primary"@onclick="(()=>btnCreate_Click())"/>
</div>

<ManufacturerDeleteDialog OnClick="btnDelete_Click"></ManufacturerDeleteDialog>

<ManufacturerEditionForm EditorModel="@manufacturer" SaveOrUpdated="@SaveOrUpdated">
    <EditorFormTitle>@editorFormTitle</EditorFormTitle>
</ManufacturerEditionForm>

@code {
    protected void btnCreate_Click()
    {
        editorFormTitle = "등록하기";
        manufacturer = new Manufacturer(); //모델 클리어
    }

    private string editorFormTitle = "";
    List<Manufacturer> manufacturers;
    private Manufacturer manufacturer = new Manufacturer();


    protected override async Task OnInitializedAsync()
    {

        manufacturers = await repository.GetManufacturers();

    }
    protected async Task btnDelete_Click()
    {
        //await JS.InvokeAsync<object>("alert", "여기까지 왔군요?" + manufacturer.Id + "번을 지울건가요");
        await repository.DeleteManufacturer(manufacturer.Id); //삭제
        await JS.InvokeAsync<object>("closeModal", "manufacturerDeleteDialog");
        manufacturers = await repository.GetManufacturers(); //다시읽어오기
        manufacturer = new Manufacturer();// 선택항목 초기화
    }

    private void DeleteBy(Manufacturer manu)
    {
        manufacturer = manu;
    }
    private void EditBy(Manufacturer manu)
    {
        editorFormTitle = "수정하기";
        manufacturer = manu;
    }

    //등록 또는 수정 후 현재 페이지 다시 로드
    private async void SaveOrUpdated()
    {
        manufacturers = await repository.GetManufacturers(); //다시읽어오기
        StateHasChanged();
    }
}
